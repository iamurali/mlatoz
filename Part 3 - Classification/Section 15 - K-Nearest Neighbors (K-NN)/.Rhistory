# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> Logistical regression.
classifier = glm(formula = Purchased ~ ., family = binomial, data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
test_pred = ifelse( prob_pred > 0.5, 1, 0)
# ====> Confusion matrix
cm = table(test_set[, 3], test_pred)
# ====> Plot grapth
draw_plot <- function(set, classifier, title) {
x1 = seq(min(set[, 1])-1, max(set[, 1])+1, by = 0.01)
x2 = seq(min(set[, 1])-1, max(set[, 1])+1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_pred = predict(classifier, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
print(grid_set)
plot(set[, -3], main = title, xlab = 'Age', ylab = 'Estimated Salary', xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_pred), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '', col = ifelse(y_pred == 1, 'springgreen3', 'tomato'))
points(set, pch = 21,bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
}
draw_plot(training_set, classifier, 'Logistic regression (Training set)')
# Logistic Regression
setwd("~/work/mlatoz/Part 3 - Classification/Section 14 - Logistic Regression")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> Logistical regression.
classifier = glm(formula = Purchased ~ ., family = binomial, data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
test_pred = ifelse( prob_pred > 0.5, 1, 0)
# ====> Confusion matrix
cm = table(test_set[, 3], test_pred)
# ====> Plot grapth
#draw_plot <- function(set, classifier, title) {
set = training_set
title = 'tmp'
x1 = seq(min(set[, 1])-1, max(set[, 1])+1, by = 0.01)
x1
x2 = seq(min(set[, 1])-1, max(set[, 1])+1, by = 0.01)
x2
grid_set = expand.grid(x1, x2)
grid_set
getOption("max.print")
colnames(grid_set) = c('Age', 'EstimatedSalary')
grid_set
View(grid_set)
View(grid_set)
View(test_set)
View(test_set)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_pred = predict(classifier, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred
length(prob_pred)
View(training_set)
View(training_set)
# Logistic Regression
setwd("~/work/mlatoz/Part 3 - Classification/Section 14 - Logistic Regression")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> Logistical regression.
classifier = glm(formula = Purchased ~ ., family = binomial, data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
test_pred = ifelse( prob_pred > 0.5, 1, 0)
# ====> Confusion matrix
cm = table(test_set[, 3], test_pred)
# ====> Plot grapth
draw_plot <- function(set, classifier, title) {
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_pred = predict(classifier, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
print(grid_set)
plot(set[, -3], main = title, xlab = 'Age', ylab = 'Estimated Salary', xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_pred), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '', col = ifelse(y_pred == 1, 'springgreen3', 'tomato'))
points(set, pch = 21,bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
}
draw_plot(training_set, classifier, 'Logistic regression (Training set)')
# Logistic Regression
setwd("~/work/mlatoz/Part 3 - Classification/Section 14 - Logistic Regression")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> Logistical regression.
classifier = glm(formula = Purchased ~ ., family = binomial, data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
test_pred = ifelse( prob_pred > 0.5, 1, 0)
# ====> Confusion matrix
cm = table(test_set[, 3], test_pred)
# ====> Plot grapth
draw_plot <- function(set, classifier, title) {
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_pred = predict(classifier, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
plot(set[, -3], main = title, xlab = 'Age', ylab = 'Estimated Salary', xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_pred), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '', col = ifelse(y_pred == 1, 'springgreen3', 'tomato'))
points(set, pch = 21,bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
}
draw_plot(training_set, classifier, 'Logistic regression (Training set)')
# Logistic Regression
setwd("~/work/mlatoz/Part 3 - Classification/Section 14 - Logistic Regression")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> Logistical regression.
classifier = glm(formula = Purchased ~ ., family = binomial, data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
test_pred = ifelse( prob_pred > 0.5, 1, 0)
# ====> Confusion matrix
cm = table(test_set[, 3], test_pred)
# ====> Plot grapth
draw_plot <- function(set, classifier, title) {
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_pred = predict(classifier, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
plot(set[, -3], main = title, xlab = 'Age', ylab = 'Estimated Salary', xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_pred), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_pred == 1, 'springgreen3', 'tomato'))
points(set, pch = 21,bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
}
draw_plot(training_set, classifier, 'Logistic regression (Training set)')
# Logistic Regression
setwd("~/work/mlatoz/Part 3 - Classification/Section 14 - Logistic Regression")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> Logistical regression.
classifier = glm(formula = Purchased ~ ., family = binomial, data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
test_pred = ifelse( prob_pred > 0.5, 1, 0)
# ====> Confusion matrix
cm = table(test_set[, 3], test_pred)
# ====> Plot grapth
draw_plot <- function(set, classifier, title, filename) {
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_pred = predict(classifier, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
plot(set[, -3], main = title, xlab = 'Age', ylab = 'Estimated Salary', xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_pred), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_pred == 1, 'springgreen3', 'tomato'))
points(set, pch = 21,bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
ggsave(filename=filename, plot=plot)
}
train_plot = draw_plot(training_set, classifier, 'Logistic regression (Training set)', 'r_logistic_train.png')
# Logistic Regression
setwd("~/work/mlatoz/Part 3 - Classification/Section 14 - Logistic Regression")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> Logistical regression.
classifier = glm(formula = Purchased ~ ., family = binomial, data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
test_pred = ifelse( prob_pred > 0.5, 1, 0)
# ====> Confusion matrix
cm = table(test_set[, 3], test_pred)
# ====> Plot grapth
draw_plot <- function(set, classifier, title, filename) {
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_pred = predict(classifier, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
plot(set[, -3], main = title, xlab = 'Age', ylab = 'Estimated Salary', xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_pred), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_pred == 1, 'springgreen3', 'tomato'))
points(set, pch = 21,bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
png(filename)
dev.off()
}
train_plot = draw_plot(training_set, classifier, 'Logistic regression (Training set)', 'r_logistic_train.png')
# Logistic Regression
setwd("~/work/mlatoz/Part 3 - Classification/Section 14 - Logistic Regression")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> Logistical regression.
classifier = glm(formula = Purchased ~ ., family = binomial, data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
test_pred = ifelse( prob_pred > 0.5, 1, 0)
# ====> Confusion matrix
cm = table(test_set[, 3], test_pred)
# ====> Plot grapth
draw_plot <- function(set, classifier, title, filename) {
png(filename)
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_pred = predict(classifier, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
plot(set[, -3], main = title, xlab = 'Age', ylab = 'Estimated Salary', xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_pred), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_pred == 1, 'springgreen3', 'tomato'))
points(set, pch = 21,bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
dev.off()
}
train_plot = draw_plot(training_set, classifier, 'Logistic regression (Training set)', 'r_logistic_train.png')
# Logistic Regression
setwd("~/work/mlatoz/Part 3 - Classification/Section 14 - Logistic Regression")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> Logistical regression.
classifier = glm(formula = Purchased ~ ., family = binomial, data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
test_pred = ifelse( prob_pred > 0.5, 1, 0)
# ====> Confusion matrix
cm = table(test_set[, 3], test_pred)
# ====> Plot grapth
draw_plot <- function(set, classifier, title, filename) {
png(filename)
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_pred = predict(classifier, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
plot(set[, -3], main = title, xlab = 'Age', ylab = 'Estimated Salary', xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_pred), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_pred == 1, 'springgreen3', 'tomato'))
points(set, pch = 21,bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
dev.off()
}
draw_plot(training_set, classifier, 'Logistic regression (Training set)', 'r_logistic_train.png')
draw_plot(test_set, classifier, 'Logistic regression (Test set)', 'r_logistic_test.png')
setwd("~/work/mlatoz/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
library(class)
# KNN Classifier
setwd("~/work/mlatoz/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
library(class)
# KNN Classifier
setwd("~/work/mlatoz/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
library(class)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> KNN regression.
classifier = glm(formula = Purchased ~ ., family = binomial, data = training_set)
classifier = knn(train = training_set[, -3], test = test_set, cl=training_set[, 3], k=5)
# KNN Classifier
setwd("~/work/mlatoz/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
library(class)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> KNN regression.
classifier = glm(formula = Purchased ~ ., family = binomial, data = training_set)
classifier = knn(training_set[, -3], test_set, cl=training_set[, 3], k=5)
# KNN Classifier
setwd("~/work/mlatoz/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
library(class)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> KNN regression.
classifier = knn(training_set[, -3], test_set, cl=training_set[, 3], k=5)
# KNN Classifier
setwd("~/work/mlatoz/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
library(class)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> KNN regression.
classifier = knn(training_set[, -3], test_set[, -3], cl=training_set[, 3], k=5)
# KNN Classifier
setwd("~/work/mlatoz/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
library(class)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> KNN regression.
test_pred = knn(training_set[, -3], test_set[, -3], cl=training_set[, 3], k=5)
cm = table(test_set[, 3], test_pred[, -3])
cm = table(test_set[, 3], test_pred)
cm
# KNN Classifier
setwd("~/work/mlatoz/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
library(class)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> KNN regression.
test_pred = knn(training_set[, -3], test_set[, -3], cl=training_set[, 3], k=5)
# ====> Confusion matrix
cm = table(test_set[, 3], test_pred)
# ====> Plot grapth
draw_plot <- function(set, classifier, title, filename) {
png(filename)
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_pred = predict(classifier, type = 'response', newdata = grid_set)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
plot(set[, -3], main = title, xlab = 'Age', ylab = 'Estimated Salary', xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_pred), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_pred == 1, 'springgreen3', 'tomato'))
points(set, pch = 21,bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
dev.off()
}
draw_plot(training_set, classifier, 'KNN (Training set)', 'r_knn_train.png')
draw_plot(test_set, classifier, 'KNN (Test set)', 'r_knn_test.png')
# KNN Classifier
setwd("~/work/mlatoz/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# install.packages('ElemStatLearn')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
library(ElemStatLearn)
library(caTools)
library(class)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# ====> Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# ===> KNN regression.
test_pred = knn(training_set[, -3], test_set[, -3], cl=training_set[, 3], k=5)
# ====> Confusion matrix
cm = table(test_set[, 3], test_pred)
# ====> Plot grapth
draw_plot <- function(set, classifier, title, filename) {
png(filename)
x1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
x2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(x1, x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_pred = knn(training_set[, -3], grid_set, cl=training_set[, 3], k=5)
plot(set[, -3], main = title, xlab = 'Age', ylab = 'Estimated Salary', xlim = range(x1), ylim = range(x2))
contour(x1, x2, matrix(as.numeric(y_pred), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_pred == 1, 'springgreen3', 'tomato'))
points(set, pch = 21,bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
dev.off()
}
draw_plot(training_set, classifier, 'KNN (Training set)', 'r_knn_train.png')
draw_plot(test_set, classifier, 'KNN (Test set)', 'r_knn_test.png')
